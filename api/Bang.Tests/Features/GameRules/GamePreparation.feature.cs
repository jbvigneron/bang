// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Bang.Tests.Features.GameRules
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class PreparationDuJeuFeature : object, Xunit.IClassFixture<PreparationDuJeuFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "GamePreparation.feature"
#line hidden
        
        public PreparationDuJeuFeature(PreparationDuJeuFeature.FixtureData fixtureData, Bang_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("fr-FR"), "Features/GameRules", "Préparation du jeu", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Faire une partie à 4 joueurs")]
        [Xunit.TraitAttribute("FeatureTitle", "Préparation du jeu")]
        [Xunit.TraitAttribute("Description", "Faire une partie à 4 joueurs")]
        public void FaireUnePartieA4Joueurs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Faire une partie à 4 joueurs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "playerName"});
                table1.AddRow(new string[] {
                            "Jean"});
                table1.AddRow(new string[] {
                            "Max"});
                table1.AddRow(new string[] {
                            "Emilie"});
                table1.AddRow(new string[] {
                            "Martin"});
#line 4
 testRunner.Given("les joueurs suivants veulent jouer", ((string)(null)), table1, "Sachant que ");
#line hidden
#line 10
 testRunner.When("la partie se prépare", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 11
 testRunner.Then("il y a un shérif", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
#line 12
 testRunner.And("il y a 3 autres personnes avec un autre rôle", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Faire une partie à 5 joueurs")]
        [Xunit.TraitAttribute("FeatureTitle", "Préparation du jeu")]
        [Xunit.TraitAttribute("Description", "Faire une partie à 5 joueurs")]
        public void FaireUnePartieA5Joueurs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Faire une partie à 5 joueurs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "playerName"});
                table2.AddRow(new string[] {
                            "Jean"});
                table2.AddRow(new string[] {
                            "Max"});
                table2.AddRow(new string[] {
                            "Emilie"});
                table2.AddRow(new string[] {
                            "Martin"});
                table2.AddRow(new string[] {
                            "Anna"});
#line 15
 testRunner.Given("les joueurs suivants veulent jouer", ((string)(null)), table2, "Sachant que ");
#line hidden
#line 22
 testRunner.When("la partie se prépare", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 23
 testRunner.Then("il y a un shérif", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
#line 24
 testRunner.And("il y a 4 autres personnes avec un autre rôle", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Faire une partie à 6 joueurs")]
        [Xunit.TraitAttribute("FeatureTitle", "Préparation du jeu")]
        [Xunit.TraitAttribute("Description", "Faire une partie à 6 joueurs")]
        public void FaireUnePartieA6Joueurs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Faire une partie à 6 joueurs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "playerName"});
                table3.AddRow(new string[] {
                            "Jean"});
                table3.AddRow(new string[] {
                            "Max"});
                table3.AddRow(new string[] {
                            "Emilie"});
                table3.AddRow(new string[] {
                            "Martin"});
                table3.AddRow(new string[] {
                            "Anna"});
                table3.AddRow(new string[] {
                            "Eric"});
#line 27
 testRunner.Given("les joueurs suivants veulent jouer", ((string)(null)), table3, "Sachant que ");
#line hidden
#line 35
 testRunner.When("la partie se prépare", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 36
 testRunner.Then("il y a un shérif", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
#line 37
 testRunner.And("il y a 5 autres personnes avec un autre rôle", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Faire une partie à 7 joueurs")]
        [Xunit.TraitAttribute("FeatureTitle", "Préparation du jeu")]
        [Xunit.TraitAttribute("Description", "Faire une partie à 7 joueurs")]
        public void FaireUnePartieA7Joueurs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Faire une partie à 7 joueurs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "playerName"});
                table4.AddRow(new string[] {
                            "Jean"});
                table4.AddRow(new string[] {
                            "Max"});
                table4.AddRow(new string[] {
                            "Emilie"});
                table4.AddRow(new string[] {
                            "Martin"});
                table4.AddRow(new string[] {
                            "Anna"});
                table4.AddRow(new string[] {
                            "Eric"});
                table4.AddRow(new string[] {
                            "Jane"});
#line 40
 testRunner.Given("les joueurs suivants veulent jouer", ((string)(null)), table4, "Sachant que ");
#line hidden
#line 49
 testRunner.When("la partie se prépare", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 50
 testRunner.Then("il y a un shérif", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
#line 51
 testRunner.And("il y a 6 autres personnes avec un autre rôle", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Dévoiler le shérif")]
        [Xunit.TraitAttribute("FeatureTitle", "Préparation du jeu")]
        [Xunit.TraitAttribute("Description", "Dévoiler le shérif")]
        public void DevoilerLeSherif()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dévoiler le shérif", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "playerName"});
                table5.AddRow(new string[] {
                            "Jean"});
                table5.AddRow(new string[] {
                            "Max"});
                table5.AddRow(new string[] {
                            "Emilie"});
                table5.AddRow(new string[] {
                            "Martin"});
#line 54
 testRunner.Given("les joueurs suivants veulent jouer", ((string)(null)), table5, "Sachant que ");
#line hidden
#line 60
 testRunner.When("la partie se prépare", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 61
 testRunner.Then("le shérif dévoile sa carte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Distribuer les personnages")]
        [Xunit.TraitAttribute("FeatureTitle", "Préparation du jeu")]
        [Xunit.TraitAttribute("Description", "Distribuer les personnages")]
        public void DistribuerLesPersonnages()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Distribuer les personnages", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "playerName"});
                table6.AddRow(new string[] {
                            "Jean"});
                table6.AddRow(new string[] {
                            "Max"});
                table6.AddRow(new string[] {
                            "Emilie"});
                table6.AddRow(new string[] {
                            "Martin"});
#line 64
 testRunner.Given("les joueurs suivants veulent jouer", ((string)(null)), table6, "Sachant que ");
#line hidden
#line 70
 testRunner.When("la partie se prépare", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 71
 testRunner.And("\"Max\" pioche une carte personnage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
#line 72
 testRunner.Then("un personnage est attribué à \"Max\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "characterName",
                            "lives"});
                table7.AddRow(new string[] {
                            "Bart Cassidy",
                            "4"});
                table7.AddRow(new string[] {
                            "Black Jack",
                            "4"});
                table7.AddRow(new string[] {
                            "Calamity Janet",
                            "4"});
                table7.AddRow(new string[] {
                            "El Gringo",
                            "3"});
                table7.AddRow(new string[] {
                            "Jesse Jones",
                            "4"});
                table7.AddRow(new string[] {
                            "Jourdonnais",
                            "4"});
                table7.AddRow(new string[] {
                            "Kit Carlson",
                            "4"});
                table7.AddRow(new string[] {
                            "Lucky Duke",
                            "4"});
                table7.AddRow(new string[] {
                            "Paul Regret",
                            "3"});
                table7.AddRow(new string[] {
                            "Pedro Ramirez",
                            "4"});
                table7.AddRow(new string[] {
                            "Rose Doolan",
                            "4"});
                table7.AddRow(new string[] {
                            "Sid Ketchum",
                            "4"});
                table7.AddRow(new string[] {
                            "Slab le flingueur",
                            "4"});
                table7.AddRow(new string[] {
                            "Suzy Lafayette",
                            "4"});
                table7.AddRow(new string[] {
                            "Sam le Vautour",
                            "4"});
                table7.AddRow(new string[] {
                            "Willy le Kid",
                            "4"});
#line 73
 testRunner.And("le nombre de vies de \"Max\" lui est attribué selon son personnage et son rôle", ((string)(null)), table7, "Et ");
#line hidden
#line 91
 testRunner.And("l arme principale de \"Max\" est \"Colt .45\" d\'une portée de 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Pioche de départ")]
        [Xunit.TraitAttribute("FeatureTitle", "Préparation du jeu")]
        [Xunit.TraitAttribute("Description", "Pioche de départ")]
        public void PiocheDeDepart()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pioche de départ", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 93
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "playerName"});
                table8.AddRow(new string[] {
                            "Jean"});
                table8.AddRow(new string[] {
                            "Max"});
                table8.AddRow(new string[] {
                            "Emilie"});
                table8.AddRow(new string[] {
                            "Martin"});
#line 94
 testRunner.Given("les joueurs suivants veulent jouer", ((string)(null)), table8, "Sachant que ");
#line hidden
#line 100
 testRunner.When("la partie se prépare", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 101
 testRunner.Then("la pioche comporte 80 cartes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cartes de départ pour le joueur")]
        [Xunit.TraitAttribute("FeatureTitle", "Préparation du jeu")]
        [Xunit.TraitAttribute("Description", "Cartes de départ pour le joueur")]
        public void CartesDeDepartPourLeJoueur()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cartes de départ pour le joueur", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 103
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "playerName"});
                table9.AddRow(new string[] {
                            "Jean"});
                table9.AddRow(new string[] {
                            "Max"});
                table9.AddRow(new string[] {
                            "Emilie"});
                table9.AddRow(new string[] {
                            "Martin"});
#line 104
 testRunner.Given("les joueurs suivants veulent jouer", ((string)(null)), table9, "Sachant que ");
#line hidden
#line 110
 testRunner.When("la partie se prépare", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 111
 testRunner.And("\"Jean\" pioche une carte personnage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
#line 112
 testRunner.Then("\"Jean\" possède autant de cartes qu\'il a de points de vie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Le schérif commence")]
        [Xunit.TraitAttribute("FeatureTitle", "Préparation du jeu")]
        [Xunit.TraitAttribute("Description", "Le schérif commence")]
        public void LeScherifCommence()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Le schérif commence", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 114
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "playerName"});
                table10.AddRow(new string[] {
                            "Jean"});
                table10.AddRow(new string[] {
                            "Max"});
                table10.AddRow(new string[] {
                            "Emilie"});
                table10.AddRow(new string[] {
                            "Martin"});
#line 115
 testRunner.Given("les joueurs suivants veulent jouer", ((string)(null)), table10, "Sachant que ");
#line hidden
#line 121
 testRunner.When("la partie se prépare", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 122
 testRunner.And("\"Jean\" pioche une carte personnage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
#line 123
 testRunner.And("\"Max\" pioche une carte personnage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
#line 124
 testRunner.And("\"Emilie\" pioche une carte personnage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
#line 125
 testRunner.And("\"Martin\" pioche une carte personnage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
#line 126
 testRunner.Then("c\'est au shérif de commencer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                PreparationDuJeuFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                PreparationDuJeuFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
