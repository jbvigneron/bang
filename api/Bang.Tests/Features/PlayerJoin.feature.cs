// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Bang.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class UnJoueurRejointUnePartieFeature : object, Xunit.IClassFixture<UnJoueurRejointUnePartieFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "PlayerJoin.feature"
#line hidden
        
        public UnJoueurRejointUnePartieFeature(UnJoueurRejointUnePartieFeature.FixtureData fixtureData, Bang_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("fr-FR"), "Features", "Un joueur rejoint une partie", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "playerName"});
            table6.AddRow(new string[] {
                        "Jean"});
            table6.AddRow(new string[] {
                        "Max"});
            table6.AddRow(new string[] {
                        "Emilie"});
            table6.AddRow(new string[] {
                        "Martin"});
#line 4
 testRunner.Given("ces joueurs veulent lancer une partie", ((string)(null)), table6, "Sachant que ");
#line hidden
#line 10
 testRunner.When("la partie s\'initialise", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Rejoindre une partie")]
        [Xunit.TraitAttribute("FeatureTitle", "Un joueur rejoint une partie")]
        [Xunit.TraitAttribute("Description", "Rejoindre une partie")]
        public void RejoindreUnePartie()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Rejoindre une partie", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 13
 testRunner.When("\"Max\" veut rejoindre la partie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 14
 testRunner.Then("un personnage lui est attribué", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "characterName",
                            "lives"});
                table7.AddRow(new string[] {
                            "Bart Cassidy",
                            "4"});
                table7.AddRow(new string[] {
                            "Black Jack",
                            "4"});
                table7.AddRow(new string[] {
                            "Calamity Janet",
                            "4"});
                table7.AddRow(new string[] {
                            "El Gringo",
                            "3"});
                table7.AddRow(new string[] {
                            "Jesse Jones",
                            "4"});
                table7.AddRow(new string[] {
                            "Jourdonnais",
                            "4"});
                table7.AddRow(new string[] {
                            "Kit Carlson",
                            "4"});
                table7.AddRow(new string[] {
                            "Lucky Duke",
                            "4"});
                table7.AddRow(new string[] {
                            "Paul Regret",
                            "3"});
                table7.AddRow(new string[] {
                            "Pedro Ramirez",
                            "4"});
                table7.AddRow(new string[] {
                            "Rose Doolan",
                            "4"});
                table7.AddRow(new string[] {
                            "Sid Ketchum",
                            "4"});
                table7.AddRow(new string[] {
                            "Slab le flingeur",
                            "4"});
                table7.AddRow(new string[] {
                            "Suzy Lafayette",
                            "4"});
                table7.AddRow(new string[] {
                            "Sam le vautour",
                            "4"});
                table7.AddRow(new string[] {
                            "Willy le Kid",
                            "4"});
#line 15
 testRunner.And("son nombre de vies lui est attribué selon son personnage", ((string)(null)), table7, "Et ");
#line hidden
#line 33
 testRunner.And("le joueur est armé avec \"Colt .45\" d\'une portée de 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                UnJoueurRejointUnePartieFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                UnJoueurRejointUnePartieFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
