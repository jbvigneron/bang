// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Bang.Tests.Features.Game
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TourDunJoueur_CartesArmeFeature : object, Xunit.IClassFixture<TourDunJoueur_CartesArmeFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "WeaponCards.feature"
#line hidden
        
        public TourDunJoueur_CartesArmeFeature(TourDunJoueur_CartesArmeFeature.FixtureData fixtureData, Bang_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("fr-FR"), "Features/Game", "Tour d\'un joueur - Cartes Arme", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "playerName",
                        "characterName",
                        "role"});
            table2.AddRow(new string[] {
                        "Jean",
                        "Bart Cassidy",
                        "Schérif"});
            table2.AddRow(new string[] {
                        "Max",
                        "Rose Doolan",
                        "Renégat"});
            table2.AddRow(new string[] {
                        "Emilie",
                        "Willy le Kid",
                        "Hors-la-loi"});
            table2.AddRow(new string[] {
                        "Martin",
                        "Sam le Vautour",
                        "Hors-la-loi"});
#line 5
 testRunner.Given("une partie est lancée avec ces joueurs", ((string)(null)), table2, "Sachant qu\'");
#line hidden
#line 11
 testRunner.When("c\'est au tour de \"Jean\", il pioche 2 cartes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="S\'équiper d\'une nouvelle arme")]
        [Xunit.TraitAttribute("FeatureTitle", "Tour d\'un joueur - Cartes Arme")]
        [Xunit.TraitAttribute("Description", "S\'équiper d\'une nouvelle arme")]
        [Xunit.InlineDataAttribute("Volcanic", "1", new string[0])]
        [Xunit.InlineDataAttribute("Schofield", "2", new string[0])]
        [Xunit.InlineDataAttribute("Remington", "3", new string[0])]
        [Xunit.InlineDataAttribute("Carabine", "4", new string[0])]
        [Xunit.InlineDataAttribute("Winchester", "5", new string[0])]
        public void SequiperDuneNouvelleArme(string weaponName, string range, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("weaponName", weaponName);
            argumentsOfScenario.Add("range", range);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("S\'équiper d\'une nouvelle arme", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 14
 testRunner.Given(string.Format("\"Jean\" possède une carte \"{0}\" dans son jeu", weaponName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Etant donné que ");
#line hidden
#line 15
 testRunner.When(string.Format("\"Jean\" joue une carte \"{0}\"", weaponName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 16
 testRunner.Then(string.Format("\"Jean\" place sa carte \"{0}\" devant lui", weaponName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
#line 17
 testRunner.And(string.Format("\"Jean\" est armé d\'une \"{0}\" ayant une portée de {1}", weaponName, range), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                TourDunJoueur_CartesArmeFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                TourDunJoueur_CartesArmeFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
