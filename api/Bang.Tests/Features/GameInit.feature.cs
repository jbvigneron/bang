// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Bang.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class InitialisationDuJeuFeature : object, Xunit.IClassFixture<InitialisationDuJeuFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "GameInit.feature"
#line hidden
        
        public InitialisationDuJeuFeature(InitialisationDuJeuFeature.FixtureData fixtureData, Bang_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("fr-FR"), "Features", "Initialisation du jeu", @"![Calculator](https://specflow.org/wp-content/uploads/2020/09/calculator.png)
Simple calculator for adding **two** numbers

Link to a feature: [Calculator](Bang.Tests/Features/Calculator.feature)
***Further read***: **[Learn more about how to generate Living Documentation](https://docs.specflow.org/projects/specflow-livingdoc/en/latest/LivingDocGenerator/Generating-Documentation.html)**", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Démarrer la partie à 4 joueurs")]
        [Xunit.TraitAttribute("FeatureTitle", "Initialisation du jeu")]
        [Xunit.TraitAttribute("Description", "Démarrer la partie à 4 joueurs")]
        public void DemarrerLaPartieA4Joueurs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Démarrer la partie à 4 joueurs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "playerName"});
                table1.AddRow(new string[] {
                            "Jean"});
                table1.AddRow(new string[] {
                            "Max"});
                table1.AddRow(new string[] {
                            "Emilie"});
                table1.AddRow(new string[] {
                            "Martin"});
#line 9
 testRunner.Given("ces joueurs veulent lancer une partie", ((string)(null)), table1, "Sachant que ");
#line hidden
#line 15
 testRunner.When("la partie s\'initialise", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 16
 testRunner.Then("il y a un shérif", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
#line 17
 testRunner.And("il y a 3 autres personnes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Démarrer la partie à 5 joueurs")]
        [Xunit.TraitAttribute("FeatureTitle", "Initialisation du jeu")]
        [Xunit.TraitAttribute("Description", "Démarrer la partie à 5 joueurs")]
        public void DemarrerLaPartieA5Joueurs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Démarrer la partie à 5 joueurs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "playerName"});
                table2.AddRow(new string[] {
                            "Jean"});
                table2.AddRow(new string[] {
                            "Max"});
                table2.AddRow(new string[] {
                            "Emilie"});
                table2.AddRow(new string[] {
                            "Martin"});
                table2.AddRow(new string[] {
                            "Anna"});
#line 20
 testRunner.Given("ces joueurs veulent lancer une partie", ((string)(null)), table2, "Sachant que ");
#line hidden
#line 27
 testRunner.When("la partie s\'initialise", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 28
 testRunner.Then("il y a un shérif", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
#line 29
 testRunner.And("il y a 4 autres personnes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Démarrer la partie à 6 joueurs")]
        [Xunit.TraitAttribute("FeatureTitle", "Initialisation du jeu")]
        [Xunit.TraitAttribute("Description", "Démarrer la partie à 6 joueurs")]
        public void DemarrerLaPartieA6Joueurs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Démarrer la partie à 6 joueurs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "playerName"});
                table3.AddRow(new string[] {
                            "Jean"});
                table3.AddRow(new string[] {
                            "Max"});
                table3.AddRow(new string[] {
                            "Emilie"});
                table3.AddRow(new string[] {
                            "Martin"});
                table3.AddRow(new string[] {
                            "Anna"});
                table3.AddRow(new string[] {
                            "Eric"});
#line 32
 testRunner.Given("ces joueurs veulent lancer une partie", ((string)(null)), table3, "Sachant que ");
#line hidden
#line 40
 testRunner.When("la partie s\'initialise", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 41
 testRunner.Then("il y a un shérif", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
#line 42
 testRunner.And("il y a 5 autres personnes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Démarrer la partie à 7 joueurs")]
        [Xunit.TraitAttribute("FeatureTitle", "Initialisation du jeu")]
        [Xunit.TraitAttribute("Description", "Démarrer la partie à 7 joueurs")]
        public void DemarrerLaPartieA7Joueurs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Démarrer la partie à 7 joueurs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "playerName"});
                table4.AddRow(new string[] {
                            "Jean"});
                table4.AddRow(new string[] {
                            "Max"});
                table4.AddRow(new string[] {
                            "Emilie"});
                table4.AddRow(new string[] {
                            "Martin"});
                table4.AddRow(new string[] {
                            "Anna"});
                table4.AddRow(new string[] {
                            "Eric"});
                table4.AddRow(new string[] {
                            "Jane"});
#line 45
 testRunner.Given("ces joueurs veulent lancer une partie", ((string)(null)), table4, "Sachant que ");
#line hidden
#line 54
 testRunner.When("la partie s\'initialise", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 55
 testRunner.Then("il y a un shérif", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
#line 56
 testRunner.And("il y a 6 autres personnes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Dévoiler le schérif")]
        [Xunit.TraitAttribute("FeatureTitle", "Initialisation du jeu")]
        [Xunit.TraitAttribute("Description", "Dévoiler le schérif")]
        public void DevoilerLeScherif()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dévoiler le schérif", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "playerName"});
                table5.AddRow(new string[] {
                            "Jean"});
                table5.AddRow(new string[] {
                            "Max"});
                table5.AddRow(new string[] {
                            "Emilie"});
                table5.AddRow(new string[] {
                            "Martin"});
#line 59
 testRunner.Given("ces joueurs veulent lancer une partie", ((string)(null)), table5, "Sachant que ");
#line hidden
#line 65
 testRunner.When("la partie s\'initialise", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 66
 testRunner.Then("le schérif dévoile sa carte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
#line 67
 testRunner.And("le schérif possède une balle supplémentaire", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                InitialisationDuJeuFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                InitialisationDuJeuFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
